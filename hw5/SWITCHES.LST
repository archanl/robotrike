8086/87/88/186 MACRO ASSEMBLER    SWITCHES                                                 18:51:29  11/29/;3  PAGE    1


DOS 5.0 (038-N) 8086/87/88/186 MACRO ASSEMBLER V3.1 ASSEMBLY OF MODULE SWITCHES
OBJECT MODULE PLACED IN SWITCHES.OBJ
ASSEMBLER INVOKED BY:  C:\UTIL\ASM86.EXE SWITCHES.ASM M1 EP DB


LOC  OBJ                  LINE     SOURCE

                             1         NAME    SWITCHES
                             2     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3     ;                                                                            ;
                             4     ;                                   SWITCHES                                 ;
                             5     ;                               SWITCHES Routines                            ;
                             6     ;                                   EE/CS 51                                 ;
                             7     ;                                 Archan Luhar                               ;
                             8     ;                                 TA: Joe Greef                              ;
                             9     ;                                                                            ;
                            10     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11     
                            12     ; This file contains functions to handle a periodic timer event to update
                            13     ; check key presses and execute the right key handler.
                            14     ;
                            15     ; The included public functions are:
                            16     ;   - SwitchesTimerEventHandler
                            17     ;           Checks the switches to see if any are pressed and debounces them and
                            18     ;           calls the appropriate switch handler (currently just a test function
                            19     ;           that enqueues the call arguments and displays them).
                            20     ;   - SwitchEventHandler
                            21     ;           Calls the right function given which key's handler to trigger.
                            22     ;           Currently only calls test EnqueueEvent function.
                            23     ;
                            24     ; Revision History:
                            25     ;       11/20/2013      Archan Luhar    Finished switches.
                            26     
                            27     ; local includes
                            28 +1  $INCLUDE(general.inc)
                      =1    29     ; General Definitions
  0000                =1    30     ASCII_NULL      EQU     0
  0002                =1    31     BYTES_IN_WORD   EQU     2
  0008                =1    32     BYTE_BITS       EQU     8               ; Number of bits in a byte
                            33 +1  $INCLUDE(switches.inc)
  0080                =1    34     FIRST_SWITCHES_ROW          EQU     80H ; address of first switch row input
  0004                =1    35     SWITCHES_PER_ROW            EQU     4   ; number of columns
  0004                =1    36     NUM_SWITCH_ROWS             EQU     4   ; number of rows
                      =1    37     
  0000                =1    38     NO_SWITCH_PRESSED           EQU     0   ; current_pressed_switch default value
                      =1    39     
                      =1    40     ; Debouncing and repeat times
  0032                =1    41     KEY_PRESS_INIT_DEBOUNCE     EQU     50  ; ms
  01F4                =1    42     KEY_REPEAT_DEBOUNCE         EQU     500 ; ms
  0064                =1    43     KEY_REPEAT_RATE             EQU     100 ; ms
                      =1    44     
  0000                =1    45     SWITCH_PRESS_EVENT          EQU     0   ; Pass to EnqueueEvent in AH
                            46     
                            47     
                            48     CGROUP  GROUP   CODE
                            49     DGROUP  GROUP   DATA
----                        50     CODE    SEGMENT PUBLIC 'CODE'
8086/87/88/186 MACRO ASSEMBLER    SWITCHES                                                 18:51:29  11/29/;3  PAGE    2


LOC  OBJ                  LINE     SOURCE

                            51             ASSUME  CS:CGROUP, DS:DGROUP, ES:NOTHING, SS:DGROUP
                            52     
                            53     ; External references
                            54         EXTRN   EnqueueEvent:NEAR
                            55     
                            56     ; InitSwitches
                            57     ;
                            58     ; Description:      This function initializes the shared variables for the
                            59     ;                   switch routines. MUST call this before calling any switch
                            60     ;                   routine.
                            61     ;
                            62     ; Operation:        Initialize current_pressed_switch to 0 to define
                            63     ;                   no switches pressed. (see DATA section)
                            64     ;
                            65     ; Arguments:        None.
                            66     ;
                            67     ; Return Value:     None.
                            68     ;
                            69     ; Local Variables:  None.
                            70     ;
                            71     ; Shared Variables: None.
                            72     ;
                            73     ; Global Variables: None.
                            74     ;
                            75     ; Input:            None.
                            76     ;
                            77     ; Output:           None.
                            78     ;
                            79     ; Error Handling:   None.
                            80     ;
                            81     ; Algorithms:       None.
                            82     ;
                            83     ; Data Structures:  None.
                            84     ;
                            85     ; Registers Used:   None.
                            86     ;
                            87     ; Stack Depth:      0.
                            88     ;
                            89     ; Author:           Archan Luhar
                            90     ; Last Modified:    11/20/2013
                            91     
0000                        92     InitSwitches    PROC    NEAR
                            93                     PUBLIC  InitSwitches
                            94         
0000 C60602000090   R       95         MOV current_pressed_switch, NO_SWITCH_PRESSED
                            96         
0006 C3                     97         RET
                            98     
                            99     InitSwitches    ENDP
                           100     
                           101     
                           102     
                           103     ; SwitchesTimerEventHandler
                           104     ;
                           105     ; Description:      This function handles the timer interrupt to
8086/87/88/186 MACRO ASSEMBLER    SWITCHES                                                 18:51:29  11/29/;3  PAGE    3


LOC  OBJ                  LINE     SOURCE

                           106     ;                   manage the switch presses. This function should be called
                           107     ;                   by a timer handler every 1 ms. It scans for pressed
                           108     ;                   switches and calls the appropriate handler for the switch
                           109     ;                   after debouncing the press.
                           110     ;
                           111     ; Operation:        If switch was pressed recently:
                           112     ;                       Checks if it still pressed. If not, it resets
                           113     ;                           the current_pressed_switch variable.
                           114     ;                       If so, checks if debounce countdown has reached zero.
                           115     ;                           If debounce countdown ~= 0, it decrements it.
                           116     ;                           If = 0, it decrements a key repeat countdown if
                           117     ;                               that is not 0, else it calls the key handler and
                           118     ;                               resets the key repeat countdown (debouncing it
                           119     ;                               once).
                           120     ;                   
                           121     ;                   If switch is not pressed:
                           122     ;                       It scans all the switch rows and sees if the last nibble
                           123     ;                       has a pressed switch. Raw, the last nibble is all 1's
                           124     ;                       if no switch is pressed. If the last switch in the row
                           125     ;                       is pressed, the first nibble is 0.
                           126     ;                       If it finds a row with a pressed switch, it records the
                           127     ;                       row address and the row's data. It also resets
                           128     ;                       the key press debounce and key repeat shared variables.
                           129     ;
                           130     ; Arguments:        None.
                           131     ;
                           132     ; Return Value:     None.
                           133     ;
                           134     ; Local Variables:  
                           135     ;
                           136     ; Shared Variables: current_pressed_switch
                           137     ;                   switch_press_countdown
                           138     ;                   current_pressed_row
                           139     ;                   switch_press_repeat_countdown
                           140     ;                   switch_press_repeat_debounced
                           141     ;                   
                           142     ;
                           143     ; Global Variables: None.
                           144     ;
                           145     ; Input:            Switches.
                           146     ;
                           147     ; Output:           None.
                           148     ;
                           149     ; Error Handling:   None.
                           150     ;
                           151     ; Algorithms:       None.
                           152     ;
                           153     ; Data Structures:  None.
                           154     ;
                           155     ; Registers Used:   None.
                           156     ;
                           157     ; Stack Depth:      2 words + 1 possible NEAR call.
                           158     ;
                           159     ; Author:           Archan Luhar
                           160     ; Last Modified:    11/20/2013
8086/87/88/186 MACRO ASSEMBLER    SWITCHES                                                 18:51:29  11/29/;3  PAGE    4


LOC  OBJ                  LINE     SOURCE

                           161     
0007                       162     SwitchesTimerEventHandler   PROC    NEAR
                           163                                 PUBLIC  SwitchesTimerEventHandler
                           164     
0007 50                    165         PUSH AX                         ; Save registers        
0008 52                    166         PUSH DX
                           167     
0009                       168         WasSwitchPressed:                       ; Checks if switch was pressed.
0009 8A260200       R      169             MOV AH, current_pressed_switch
000D 84E4                  170             TEST AH, AH                         
000F 7531                  171             JNZ SwitchWasPressed                ; If so, check debounce countdown
                           172             ; JNZ SwitchWasNotPressed           ; else, scan the switches.
                           173     
                           174         
0011                       175         SwitchWasNotPressed:
0011                       176         ScanSwitches:
0011 BA8000                177             MOV DX, FIRST_SWITCHES_ROW      ; Get address of first row of switches
                           178     
0014                       179         DeterminePressedRow:                ; Get row value and make it usable
0014 EC                    180             IN AL, DX                               ; Read value from row
0015 F6D0                  181             NOT AL                                  ; Invert value
0017 C0E004                182             SHL AL, BYTE_BITS - SWITCHES_PER_ROW    ; Get relevant bits on left
                           183             
                           184             ; Shift relevant bits to left side of byte. If all were not pressed,
                           185             ; the bits in the relevant nibble would be all 1's. NOT of that would be
                           186             ; all 0's. Shifting those all the way to the left yields a 0 AL since
                           187             ; shifting pushes 0's on the right.
001A 741C                  188             JZ EndDeterminePressedRow       ; If no switch currently pressed, loop.
                           189     
001C                       190         SwitchPressed:                      ; Else store current info and end.
001C 89160000       R      191             MOV current_pressed_row, DX     ; Store row address
0020 A20200         R      192             MOV current_pressed_switch, AL  ; Store row value
                           193             
                           194             ; Reset the countdowns. Initially, only a debounce is needed.
0023 C70606003200   R      195             MOV switch_press_countdown, KEY_PRESS_INIT_DEBOUNCE
0029 C70604000000   R      196             MOV switch_press_repeat_countdown, 0        ; 0's indicate false
002F C60603000090   R      197             MOV switch_press_repeat_debounced, 0
0035 EB6390                198             JMP EndSwitchesTimerEventHandler
                           199         
0038                       200         EndDeterminePressedRow:
0038 42                    201             INC DX                                          ; Move on to next row.
0039 81FA8400              202             CMP DX, FIRST_SWITCHES_ROW + NUM_SWITCH_ROWS    ; If switch row within
003D 72D5                  203             JB DeterminePressedRow                          ; upper bound, loop.
003F EB5990                204             JMP EndSwitchesTimerEventHandler                ; Else, wait till
                           205                                                             ; next iteration.
                           206     
                           207     
0042                       208         SwitchWasPressed:
0042                       209         CheckDebounce:
0042 8B160600       R      210             MOV DX, switch_press_countdown
0046 85D2                  211             TEST DX, DX                         ; If debounce countdown has reached
0048 7407                  212             JZ CheckCurrentSwitchState          ; zero, check the switch now.
                           213             ; JNZ UpdateDebounceCountdown
                           214     
004A                       215         UpdateDebounceCountdown:
8086/87/88/186 MACRO ASSEMBLER    SWITCHES                                                 18:51:29  11/29/;3  PAGE    5


LOC  OBJ                  LINE     SOURCE

004A FF0E0600       R      216             DEC switch_press_countdown          ; If not, decrement countdown
004E EB4A90                217             JMP EndSwitchesTimerEventHandler    ; and wait till next iteration.
                           218         
0051                       219         CheckCurrentSwitchState:                ; Debounce countdown is done.
0051 8B160000       R      220             MOV DX, current_pressed_row         ; Get the row the switch was in.
0055 EC                    221             IN AL, DX                           ; Get the current value of that row.
0056 F6D0                  222             NOT AL                              ; Invert the value.
0058 C0E004                223             SHL AL, BYTE_BITS - SWITCHES_PER_ROW; Get relevant bits on left.
                           224     
005B 3AE0                  225             CMP AH, AL                          ; Compare row pattern to when it
005D 7409                  226             JE SwitchStillPressed               ; was pressed. If same, evaluate.
                           227             ; JNE ResetSwitches                 
                           228         
005F                       229         ResetSwitches:                          ; If changed, invalidate and reset.
005F C60602000090   R      230             MOV current_pressed_switch, NO_SWITCH_PRESSED
0065 EB3390                231             JMP EndSwitchesTimerEventHandler    ; End and wait for next iteration.
                           232     
0068                       233         SwitchStillPressed:                     ; If switch is still pressed,
0068 8B1E0400       R      234             MOV BX, switch_press_repeat_countdown   ; check to wait for repeat.
006C 85DB                  235             TEST BX, BX
006E 7407                  236             JZ CallSwitchEvent                  ; If repeat countdown is 0, call.
                           237         
0070                       238         UpdateRepeatCountdown:                  ; If not, decrement repeat countdown
0070 FF0E0400       R      239             DEC switch_press_repeat_countdown   ; and wait for next iteration.
0074 EB2490                240             JMP EndSwitchesTimerEventHandler
                           241     
0077                       242         CallSwitchEvent:                        ; Handles key press event calling.
0077 E82300                243             CALL SwitchEventHandler             ; Args: Row address=DX, val=AL
007A 8A160300       R      244             MOV DL, switch_press_repeat_debounced   ; If key repeating has been
007E 84D2                  245             TEST DL, DL                             ; already "debounced" then
0080 750F                  246             JNZ ResetRepeatWithoutDebounce          ; Reset key repeating.
                           247             ; JZ ResetRepeatWithDebounce            ; Else reset it with added time.
                           248         
0082                       249         ResetRepeatWithDebounce:
0082 C70604005802   R      250             MOV switch_press_repeat_countdown, KEY_REPEAT_RATE + KEY_REPEAT_DEBOUNCE
0088 C60603000190   R      251             MOV switch_press_repeat_debounced, 1    ; Mark repeating debounced.
008E EB0A90                252             JMP EndSwitchesTimerEventHandler
                           253         
0091                       254         ResetRepeatWithoutDebounce:
0091 C70604006400   R      255             MOV switch_press_repeat_countdown, KEY_REPEAT_RATE
0097 EB0190                256             JMP EndSwitchesTimerEventHandler
                           257     
                           258     
009A                       259         EndSwitchesTimerEventHandler:
009A 5A                    260             POP DX                              ; Restore registers and return
009B 58                    261             POP AX
009C C3                    262             RET
                           263     
                           264     SwitchesTimerEventHandler   ENDP
                           265     
                           266     
                           267     ; SwitchEventHandler
                           268     ;
                           269     ; Description:      This function calls the appropriate handler for the key.
                           270     ;                   Currently it calls the test EnqueueEvent function with
8086/87/88/186 MACRO ASSEMBLER    SWITCHES                                                 18:51:29  11/29/;3  PAGE    6


LOC  OBJ                  LINE     SOURCE

                           271     ;                   the key number indexed by 0 as its code and number.
                           272     ;
                           273     ; Operation:        Calculates switch number as follows:
                           274     ;                   row = row address - first row address
                           275     ;                   col = SWITCHES_PER_ROW - # of left shits to enable sign bit
                           276     ;                   switch number = NUM_SWITCH_ROWS * col + row
                           277     ;                   Calls EnqueueEvent with switch number in AH and AL.
                           278     ;
                           279     ; Arguments:        DX = Row address
                           280     ;                   AL = Row value (1011 means all but third switch pressed)
                           281     ;
                           282     ; Return Value:     None.
                           283     ;
                           284     ; Local Variables:  DL = row
                           285     ;                   DX = col
                           286     ;                   AH, AL = switch #, switch #: argument to enqueue function
                           287     ;
                           288     ; Shared Variables: None.
                           289     ;
                           290     ; Global Variables: None.
                           291     ;
                           292     ; Input:            None.
                           293     ;
                           294     ; Output:           None.
                           295     ;
                           296     ; Error Handling:   None.
                           297     ;
                           298     ; Algorithms:       None.
                           299     ;
                           300     ; Data Structures:  None.
                           301     ;
                           302     ; Registers Used:   None.
                           303     ;
                           304     ; Stack Depth:      3 words.
                           305     ;
                           306     ; Author:           Archan Luhar
                           307     ; Last Modified:    11/20/2013
                           308     
009D                       309     SwitchEventHandler          PROC NEAR
                           310                                 PUBLIC SwitchEventHandler
                           311         
009D                       312         InitSwitchEventHandler:
009D 50                    313             PUSH AX
009E 52                    314             PUSH DX
009F 53                    315             PUSH BX
                           316         
00A0                       317         DetermineSwitchRow:
00A0 81EA8000              318             SUB DX, FIRST_SWITCHES_ROW      ; DX contains row number 0,1,..
                           319         
00A4                       320         DetermineSwitchColumn:
00A4 B303                  321             MOV BL, SWITCHES_PER_ROW - 1
00A6 84C0                  322             TEST AL, AL
00A8 7808                  323             JS EndSwitchEventHandler
00AA                       324         DetermineSwitchColumnLoop:
00AA FECB                  325             DEC BL
8086/87/88/186 MACRO ASSEMBLER    SWITCHES                                                 18:51:29  11/29/;3  PAGE    7


LOC  OBJ                  LINE     SOURCE

00AC D0E0                  326             SHL AL, 1
00AE 7802                  327             JS EndSwitchEventHandler
00B0 EBF8                  328             JMP DetermineSwitchColumnLoop
                           329         
                           330         ; AH = Switch Event
                           331             ; AL = Switch number
00B2                       332         EndSwitchEventHandler:
00B2 8AC3                  333             MOV AL, BL
00B4 C0E002                334             SHL AL, 2
00B7 02C2                  335             ADD AL, DL
                           336             
00B9 B400                  337                     MOV AH, SWITCH_PRESS_EVENT
                           338     
00BB E80000         E      339             CALL EnqueueEvent
                           340             
00BE 5B                    341             POP BX
00BF 5A                    342             POP DX
00C0 58                    343             POP AX
                           344             
00C1 C3                    345             RET
                           346             
                           347     SwitchEventHandler          ENDP
                           348     
                           349     
                           350     
                           351     
----                       352     CODE ENDS
                           353     
                           354     
----                       355     DATA SEGMENT PUBLIC 'DATA'
                           356     
0000 ????                  357         current_pressed_row             DW  ?
0002 ??                    358         current_pressed_switch          DB  ?
0003 ??                    359         switch_press_repeat_debounced   DB  ?
0004 ????                  360         switch_press_repeat_countdown   DW  ?
0006 ????                  361         switch_press_countdown          DW  ?
                           362     
----                       363     DATA ENDS
                           364     
                           365     
                           366         END

ASSEMBLY COMPLETE, NO ERRORS FOUND
